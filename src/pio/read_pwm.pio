; Copyright 2023 Zaden Ruggiero-Boun√©
;
; This file is part of NobGCC-SW.
;
; NobGCC-SW is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
;
; NobGCC-SW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License along with NobGCC. If not, see http://www.gnu.org/licenses/.

.program read_pwm

; Reads PWM inputs
;
; First value pushed to RX FIFO (FIFO[0]) is the `high pulse width count - 3`
; Second value pushed to RX FIFO (FIFO[1]) is the `low pulse width count`
;
; (FIFO[0] + 3) / (FIFO[0] + 3 + FIFO[1]) gives the % duty cycle
;
; DMA should be setup to pull on SM RX FIFO DREQ to avoid FIFO getting backed up
;
; SM clock should be set to system clock
;
; IN/WAIT pin base should be set to whichever pin is connected to the PWM input
;
; EXECCTRL_JMP_PIN should be set to whichever pin is connected to the PWM input

start:
    wait 0 PIN 0            ; wait for the pin to go low
    wait 1 PIN 0        [4] ; wait for the pin to go high, delay for 4 cycles here so that the first high pulse is off by 6 cycles, as future iterations are
.wrap_target
    mov X, ~NULL            ; high is 0xFFFFFFFF
    mov Y, ~NULL            ; low is 0xFFFFFFFF
count_high:
    jmp X-- check_high      ; decrement high pulse width counter
    jmp start               ; if the counter hits 0, abort & wait for another pulse to start
check_high:
    jmp PIN count_high      ; if pin is still high, continue to count high pulse width
count_low:
    jmp PIN send_sample     ; if the pin has gone high again, send the sample and restart counting
    jmp Y-- count_low       ; decrement low pulse width counter
    jmp start               ; if the counter hits 0, abort & wait for another pulse to start
send_sample:
    mov ISR, ~X             ; move the high pulse width counter into the ISR
    push NOBLOCK            ; push the high pulse width counter into the RX FIFO
    mov ISR, ~Y             ; push the low pulse width counter into the ISR
    push NOBLOCK            ; push the low pulse width counter into the RX FIFO
.wrap

% c-sdk {
static inline void read_pwm_program_init(PIO pio, uint sm, uint offset, uint pwm_pin) {
  // Get default config
  pio_sm_config c = read_pwm_program_get_default_config(offset);

  // Set in pin to the data pin
  sm_config_set_in_pins(&c, pwm_pin);

  // Set jump pin to the data pin
  sm_config_set_jmp_pin(&c, pwm_pin);

  // Connect PIO to data pin
  pio_gpio_init(pio, pwm_pin);

  // Set pin to input
  pio_sm_set_consecutive_pindirs(pio, sm, pwm_pin, 1, false);
  
  // Load configuration
  pio_sm_init(pio, sm, offset, &c);
}
%}